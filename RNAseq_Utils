# add gene ID to GO enrichment table (GOseq)
# to be uses only with significantly enriched GO categories

add_genes2GO<-function(GO, gene2cat, DE_genes, sep=",", colID="id"){
  require(stringi)
  gene2cat_DE<-gene2cat[gene2cat[,1]%in%DE_genes[,colID],]
  Genes<-unlist(lapply(GO$category, function(x) stri_paste(gene2cat_DE[gene2cat_DE[,2]==x,][,1], collapse = sep)))
  #genes_list<-stri_paste(gene2cat[gene2cat[,2]==GO,][,1], collapse = sep)
  data<-cbind(GO, Genes)
  return(data)
}

# add GO category to DEG table
# use all mapped categories
add_GO2genes<-function(DE_genes, gene2cat, sep=",", cat.name="GO_annotation", colID="id"){
  require(stringi, dplyr)
  gene2cat_DE<-gene2cat[gene2cat[,1]%in%DE_genes[,colID],]
  GO<-str_split_fixed(unlist(lapply(DE_genes[,colID], function(x) paste(x, stri_paste(gene2cat_DE[gene2cat_DE[,1]==x,][,2], collapse = sep), sep="/tx"))), pattern = "/tx", n=2)
  #genes_list<-stri_paste(gene2cat[gene2cat[,2]==GO,][,1], collapse = sep)
  #data<-cbind(DE_genes, GO)
  colnames(GO)[2]<-cat.name
  data<-merge(DE_genes, GO, by.x=colID, by.y=1,  all.x=T)
  data<-data %>% relocate(all_of(colID), .before = all_of(cat.name))
  return(data)
}

GOCircleR<-function (data, title, nsub, rad1, rad2, table.legend = T, zsc.col, 
          lfc.col, label.size, label.fontface, lab.wrap, trunc.width) 
{
  xmax <- y1 <- zscore <- y2 <- ID <- logx <- logy2 <- logy <- logFC <- NULL
  if (missing(title)) 
    title <- ""
  if (missing(nsub)) 
    if (dim(data)[1] > 10) 
      nsub <- 10
    else nsub <- dim(data)[1]
    if (missing(rad1)) 
      rad1 <- 2
    if (missing(rad2)) 
      rad2 <- 3
    if (missing(zsc.col)) 
      zsc.col <- c("red", "white", "blue")
    if (missing(lfc.col)) 
      lfc.col <- c("cornflowerblue", "firebrick1")
    else lfc.col <- rev(lfc.col)
    if (missing(label.size)) 
      label.size = 5
    if (missing(label.fontface)) 
      label.fontface = "plain"
    data$adj_pval <- -log(data$adj_pval, 10)
    suby <- data[!duplicated(data$term), ]
    if (missing(trunc.width)) 
      trunc.width = 100
    if (missing(lab.wrap))
      lab.wrap<-90
    else suby$term<-sapply(suby$term, function(x) str_trunc(paste(str_wrap(x,lab.wrap), collapse="\n"), width=trunc.width))
    if (is.numeric(nsub) == T) {
      suby <- suby[1:nsub, ]
    }
    else {
      if (strsplit(nsub[1], ":")[[1]][1] == "GO") {
        suby <- suby[suby$ID %in% nsub, ]
      }
      else {
        suby <- suby[suby$term %in% nsub, ]
      }
      nsub <- length(nsub)
    }
    N <- dim(suby)[1]
    r_pval <- round(range(suby$adj_pval), 0) + c(-2, 2)
    ymax <- c()
    for (i in 1:length(suby$adj_pval)) {
      val <- (suby$adj_pval[i] - r_pval[1])/(r_pval[2] - r_pval[1])
      ymax <- c(ymax, val)
    }
    df <- data.frame(x = seq(0, 10 - (10/N), length = N), xmax = rep(10/N - 
                                                                       0.2, N), y1 = rep(rad1, N), y2 = rep(rad2, N), ymax = ymax, 
                     zscore = suby$zscore, term = paste(suby$term, "\n", "[", suby$ID, "]", sep=""))
    scount <- data[!duplicated(data$term), which(colnames(data) == 
                                                   "count")][1:nsub]
    idx_term <- which(!duplicated(data$term) == T)
    xm <- c()
    logs <- c()
    for (sc in 1:length(scount)) {
      idx <- c(idx_term[sc], idx_term[sc] + scount[sc] - 1)
      val <- stats::runif(scount[sc], df$x[sc] + 0.06, (df$x[sc] + 
                                                          df$xmax[sc] - 0.06))
      xm <- c(xm, val)
      r_logFC <- round(range(data$logFC[idx[1]:idx[2]]), 0) + 
        c(-1, 1)
      for (lfc in idx[1]:idx[2]) {
        val <- (data$logFC[lfc] - r_logFC[1])/(r_logFC[2] - 
                                                 r_logFC[1])
        logs <- c(logs, val)
      }
    }
    cols <- c()
    for (ys in 1:length(logs)) cols <- c(cols, ifelse(data$logFC[ys] > 
                                                        0, "upregulated", "downregulated"))
    dfp <- data.frame(logx = xm, logy = logs, logFC = factor(cols), 
                      logy2 = rep(rad2, length(logs)))
    c <- ggplot() + geom_rect(data = df, aes(xmin = x, xmax = x + 
                                               xmax, ymin = y1, ymax = y1 + ymax, fill = zscore), colour = "black") + 
      geom_rect(data = df, aes(xmin = x, xmax = x + xmax, 
                               ymin = y2, ymax = y2 + 1), fill = "gray70") + geom_rect(data = df, 
                                                                                       aes(xmin = x, xmax = x + xmax, ymin = y2 + 0.5, ymax = y2 + 
                                                                                             0.5), colour = "white") + geom_rect(data = df, aes(xmin = x, 
                                                                                                                                                xmax = x + xmax, ymin = y2 + 0.25, ymax = y2 + 0.25), 
                                                                                                                                 colour = "white") + geom_rect(data = df, aes(xmin = x, 
                                                                                                                                                                              xmax = x + xmax, ymin = y2 + 0.75, ymax = y2 + 0.75), 
                                                                                                                                                               colour = "white") + geom_text(data = df, aes(x = x + 
                                                                                                                                                                                                              (xmax/2), y = y2 + 1.6, label = term, angle = 360 - (x = x + 
                                                                                                                                                                                                                                                                   (xmax/2))/(10/360)), size = label.size, fontface = label.fontface) + 
      coord_polar() + labs(title = title) + ylim(1, rad2 + 
                                                   1.6) + xlim(0, 10) + theme_blank + scale_fill_gradient2("z-score", 
                                                                                                           space = "Lab", low = zsc.col[3], mid = zsc.col[2], high = zsc.col[1], 
                                                                                                           guide = guide_colourbar(title.position = "top", title.hjust = 0.5), 
                                                                                                           breaks = c(min(df$zscore), max(df$zscore)), labels = c("decreasing", 
                                                                                                                                                                  "increasing")) + theme(legend.position = "bottom", 
                                                                                                                                                                                         legend.background = element_rect(fill = "transparent"), 
                                                                                                                                                                                         legend.box = "horizontal", legend.direction = "horizontal") + 
      geom_point(data = dfp, aes(x = logx, y = logy2 + logy), 
                 pch = 21, fill = "transparent", colour = "black", 
                 size = 3) + geom_point(data = dfp, aes(x = logx, 
                                                        y = logy2 + logy, colour = logFC), size = 2.5) + scale_colour_manual(values = lfc.col, 
                                                                                                                             guide = guide_legend(title.position = "top", title.hjust = 0.5))
    if (table.legend) {
      table <- draw_table(suby)
      graphics::par(mar = c(0.1, 0.1, 0.1, 0.1))
      grid.arrange(c, table, ncol = 2)
    }
    else {
      c + theme(plot.background = element_rect(colour="white", fill = "white"), 
                panel.background = element_rect(colour="white", fill = "white"))
    }
}

